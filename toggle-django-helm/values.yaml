environment: PROD

appTypeEnvName: "DJANGO_APP_TYPE"
image: {}
  # name:
  # tag:
  # imagePullPolicy: IfNotPresent

ingress:
  enabled: false
  host:
  className:
  tls:
    enabled: false
    secretName:

redis:
  enabled: true
  architecture: standalone
  fullnameOverride: django-redis
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: .5Gi
      storageClass:

postgresql:
  enabled: false
  fullnameOverride: "django-postgres"
  architecture: standalone
  auth:
    postgresPassword: ""
    database: ""
  primary:
    persistence:
      enabled: true
      storageClass: ""
      size: 1Gi

# https://artifacthub.io/packages/helm/bitnami/minio
# extraEnvVars: https://github.com/bitnami/containers/blob/main/bitnami/minio/README.md#environment-variables
minio:
  enabled: false
  disableWebUI: true
  mode: standalone
  fullnameOverride: minio
  global:
    defaultStorageClass:
  apiIngress:
    enabled: true
    ingressClassName:
    hostname:
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  auth:
    forceNewKeys: True
    rootUser: minio-user
    rootPassword:
  persistence:
    enabled: true
    size: 1Gi
  defaultBuckets: media-data,static-data
  provisioning:
    enabled: true
    resourcesPreset: "nano"
    cleanupAfterFinished:
      enabled: true
    extraCommands:
      - "mc anonymous set download provisioning/static-data"

rabbitmq:
  enabled: false
  fullnameOverride: "django-rabbitmq"
  auth:
    username: django
    password:
    erlangCookie: # Generate using `dd if=/dev/urandom bs=30 count=1 | base64`
  # XXX: Don't change this (`celery` vhost is used in templates/config/secret.yaml
  extraConfiguration: |-
    default_vhost = celery
    default_permissions.configure = .*
    default_permissions.read = .*
    default_permissions.write = .*
  resources:
    requests:
      cpu: "0.1"
      memory: 1024Mi
    limits:
      cpu: "4"
      memory: 2048Mi
  persistence:
    enabled: true
    size: 2Gi
    storageClass:

api:
  # Not required if global image are set
  image: {}
    # name: WORKER-SET-BY-CICD-IMAGE
    # tag: WORKER-SET-BY-CICD-TAG
    # imagePullPolicy: IfNotPresent
  enabled: true
  replicaCount: 1
  containerPort: 80
  command: ["/code/deploy/run_prod.sh"]
  resources:
    requests:
      cpu: "2"
      memory: 0.5Gi
    limits:
      cpu: "2"
      memory: 1Gi

worker:
  # Not required if global image are set
  image: {}
    # name: WORKER-SET-BY-CICD-IMAGE
    # tag: WORKER-SET-BY-CICD-TAG
    # imagePullPolicy: IfNotPresent
  enabled: true
  beat:
    image: {}
      # name: WORKER-SET-BY-CICD-IMAGE
      # tag: WORKER-SET-BY-CICD-TAG
      # imagePullPolicy: IfNotPresent
    command: ["celery", "-A", "myapp", "beat", "-l", "INFO"]
    resources:
      requests:
        cpu: "1"
        memory: 0.5Gi
      limits:
        cpu: "1"
        memory: 1Gi
  flower:
    image: {}
      # name: WORKER-SET-BY-CICD-IMAGE
      # tag: WORKER-SET-BY-CICD-TAG
      # imagePullPolicy: IfNotPresent
    enabled: false  # Install flower package first
    command: ["celery", "-A", "myapp", "flower", "--port=8000"]
    resources:
      requests:
        cpu: "0.1"
        memory: 0.5Gi
      limits:
        cpu: "1"
        memory: 1Gi
  queueDefaultResources:
    requests:
      cpu: "1"
      memory: 1Gi
    limits:
      cpu: "1"
      memory: 2Gi
  queueCommandPrefix:
    - "celery"
    - "-A"
    - "myapp"
    - "worker"
    - "-l"
    - "INFO"
  queues:
    # NOTE: Make sure keys are lowercase
    default:
      enabled: true
      replicaCount: 1
      celeryArgs:
        - "-Q"
        - "celery"
        - "--concurrency"
        - "4"
        - "--max-tasks-per-child"
        - "10"
      resources:
        requests:
          cpu: "1"
          memory: 1Gi
        limits:
          cpu: "1"
          memory: 2Gi

cronjobs:
  enabled: true
  image: {}
    # name: CRONJOB-SET-BY-CICD-IMAGE
    # tag: CRONJOB-SET-BY-CICD-TAG
    # imagePullPolicy: IfNotPresent
  defaultResources:
    requests:
      cpu: "1"
      memory: 1Gi
    limits:
      cpu: "1"
      memory: 2Gi
  # NOTE: Application level configuration
  jobs: {}
    # "dummy":
    #   schedule: "0 0 * * *"
    #   timeZone: "Asia/Kathmandu"
    #   enabled: false
    #   command: ["./manage.py", "run-dummy-command"]

# Not required if global image are set
argoHook:
  enabled: true
  image: {}
    # name: WORKER-SET-BY-CICD-IMAGE
    # tag: WORKER-SET-BY-CICD-TAG
    # imagePullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "0.1"
      memory: 1Gi
    limits:
      cpu: "4"
      memory: 2Gi
  hooks:
    # NOTE: Make sure keys are lowercase
    db-migrate:
      enabled: true
      hook: PostSync
      preserveHistory: true
      command: ["./manage.py", "migrate"]
    collect-static:
      enabled: true
      hook: PostSync
      command: ["./manage.py", "collectstatic", "--noinput"]

extraConfigMapName: ""  # User provided name
envConfigMapName: ""
env: {}

extraSecretsName: ""  # User provided name
secretsName: ""
secrets: {}
  # # Postgres
  # POSTGRES_DB: "{{ $.Values.postgresql.auth.database }}"
  # POSTGRES_USER: "postgres"
  # POSTGRES_PASSWORD: "{{ $.Values.postgresql.auth.postgresPassword }}"
  # POSTGRES_HOST: "{{ include \"postgresql.v1.primary.fullname\" $.Subcharts.postgresql }}"
  # POSTGRES_PORT: "{{ include \"postgresql.v1.service.port\" $.Subcharts.postgresql }}"

  # # Redis
  # REDIS_URL: "redis://{{ printf \"%s-master\" (include \"common.names.fullname\" .Subcharts.redis) }}:6379/0"

  # # Minio (S3)
  # AWS_S3_ENDPOINT_URL: "https://\{{ $.Values.minio.apiIngress.hostname }}/"
  # AWS_S3_ACCESS_KEY_ID: "{{ required \".Values.minio.auth.rootUser\" $.Values.minio.auth.rootUser }}"
  # AWS_S3_SECRET_ACCESS_KEY: "{{ required \".Values.minio.auth.rootPassword\" $.Values.minio.auth.rootPassword }}"
  # AWS_S3_REGION: "us-east-1"
  # AWS_S3_BUCKET_STATIC_NAME: static-data
  # AWS_S3_BUCKET_MEDIA_NAME: media-data
